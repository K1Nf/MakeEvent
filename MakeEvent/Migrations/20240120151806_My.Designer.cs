// <auto-generated />
using System;
using MakeEvent.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MakeEvent.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240120151806_My")]
    partial class My
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MakeEvent.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dop_Information")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Max_Ghost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("Time")
                        .IsRequired()
                        .HasColumnType("time without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2023, 12, 31),
                            Description = "Отмечаем Новый год вместе!!!",
                            Location = "Район Самарово",
                            Max_Ghost = 5,
                            Name = "Новый Год",
                            Status = "Совершено",
                            TagId = 1,
                            Time = new TimeOnly(23, 59, 0),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2024, 1, 8),
                            Description = "Пьем пиво и готовимся к рабочей неделе",
                            Location = "Район ОМК",
                            Max_Ghost = 7,
                            Name = "Пить пиво",
                            Status = "Запланировано",
                            TagId = 1,
                            Time = new TimeOnly(13, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2024, 1, 15),
                            Description = "Поход в спортзал, чтобы стать гигачадами!!!",
                            Location = "Район Учхоз",
                            Max_Ghost = 3,
                            Name = "Тренировка в тренажерном зале",
                            Status = "Запланировано",
                            TagId = 2,
                            Time = new TimeOnly(15, 0, 0),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2024, 5, 23),
                            Description = "Наматаем пару кругов вокруг города на мотиках!",
                            Location = "Вокруг города",
                            Max_Ghost = 4,
                            Name = "Катание на мотоиклах",
                            Status = "Запланировано",
                            TagId = 6,
                            Time = new TimeOnly(23, 0, 0),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MakeEvent.Models.Event_Ghost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("ghosts");
                });

            modelBuilder.Entity("MakeEvent.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("MakeEvent.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("MakeEvent.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Count_Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("INN")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<string>("Image_link")
                        .HasColumnType("text");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Middle_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Registration_Date")
                        .HasColumnType("date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            City = "Омск",
                            Count_Rating = 4,
                            Email = "umom322@mail.ru",
                            First_Name = "Умом",
                            Image_link = "",
                            Information = "Я - умом и это круто!",
                            Last_Name = "Умомов",
                            Middle_Name = "Умомович",
                            NickName = "Umom",
                            Password = "Password",
                            PhoneNumber = "89527181234",
                            Rating = 9.4199999999999999,
                            Registration_Date = new DateOnly(2023, 5, 6),
                            RoleId = 2,
                            TagId = 1,
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Ульяновск",
                            Count_Rating = 14,
                            Email = "noobas2007@mail.ru",
                            First_Name = "Нубас",
                            Image_link = "",
                            Information = "Я - noobas и я горжусь этим!",
                            Last_Name = "Черняков",
                            Middle_Name = "Нубасович",
                            NickName = "Noobas",
                            Password = "Password",
                            PhoneNumber = "89501234567",
                            Rating = 8.0,
                            Registration_Date = new DateOnly(2024, 1, 2),
                            RoleId = 2,
                            TagId = 2,
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            City = "Ханты-Мансийск",
                            Count_Rating = 100,
                            Email = "SonyaTheBestCat@mail.ru",
                            First_Name = "Соня",
                            Image_link = "",
                            Information = "Всем привет! Меня зовут Соня и я самая умная и красивая, в общем лучшая кошка в мире!",
                            Last_Name = "Репина",
                            Middle_Name = "Мариновна",
                            NickName = "Sonya",
                            Password = "Password",
                            PhoneNumber = "89574238933",
                            Rating = 10.0,
                            Registration_Date = new DateOnly(2024, 1, 2),
                            RoleId = 2,
                            TagId = 3,
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            City = "Владивосток",
                            Count_Rating = 3,
                            Email = "jendosVladivostok@mail.ru",
                            First_Name = "Евгений",
                            Image_link = "",
                            Information = "Я красава",
                            Last_Name = "Иванов",
                            Middle_Name = "Александрович",
                            NickName = "Margosha",
                            Password = "Password",
                            PhoneNumber = "89527382977",
                            Rating = 8.4800000000000004,
                            Registration_Date = new DateOnly(2023, 7, 22),
                            RoleId = 2,
                            TagId = 4,
                            UserTypeId = 2
                        });
                });

            modelBuilder.Entity("MakeEvent.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("userTypes");
                });

            modelBuilder.Entity("MakeEvent.Models.Event", b =>
                {
                    b.HasOne("MakeEvent.Models.Tag", "Tags")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeEvent.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeEvent.Models.Event_Ghost", b =>
                {
                    b.HasOne("MakeEvent.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeEvent.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeEvent.Models.User", b =>
                {
                    b.HasOne("MakeEvent.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeEvent.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakeEvent.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tag");

                    b.Navigation("UserType");
                });
#pragma warning restore 612, 618
        }
    }
}
